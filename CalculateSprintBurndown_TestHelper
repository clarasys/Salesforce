@isTest
public class CalculateSprintBurndown_TestHelper {
/*
=====================
Test Helper Methods
=====================
*/
/*
@Method: testhelper_getDiffBusinessDays
@Comments: helper method to calculate the number of working days (mon-fri) between two dates (endDate and startDate)  
*/
  public Static Integer getDiffBusinessDays(Date startDate, Date endDate) {
     
        Date tempdate = null;
     
        if (startDate > endDate) {
       tempdate = endDate;
       endDate = startDate;
       startDate = tempdate;
     }
    
        Integer i = Math.mod((date.newinstance(1985, 6, 24)).daysBetween(startDate),7); // 24/6/85 was a monday
    
        Map<Integer, Map<Integer, Integer>> m = new Map<Integer, Map<Integer, Integer>> {
      0 => new Map<Integer, Integer> { 1 => 2 , 2 => 3 , 3 => 4 , 4 => 5 , 5 => 5 , 6 => 5 },
      1 => new Map<Integer, Integer> { 1 => 2 , 2 => 3 , 3 => 4 , 4 => 4 , 5 => 4 , 6 => 5 },
      2 => new Map<Integer, Integer> { 1 => 2 , 2 => 3 , 3 => 3 , 4 => 3 , 5 => 4 , 6 => 5 },
      3 => new Map<Integer, Integer> { 1 => 2 , 2 => 2 , 3 => 2 , 4 => 3 , 5 => 4 , 6 => 5 },
      4 => new Map<Integer, Integer> { 1 => 1 , 2 => 1 , 3 => 2 , 4 => 3 , 5 => 4 , 6 => 5 },
      5 => new Map<Integer, Integer> { 1 => 0 , 2 => 1 , 3 => 2 , 4 => 3 , 5 => 4 , 6 => 5 },
      6 => new Map<Integer, Integer> { 1 => 1 , 2 => 2 , 3 => 3 , 4 => 4 , 5 => 5 , 6 => 5 }
    };

        Integer i2 = Math.mod((startDate.daysBetween(endDate)),7);
    Integer workDays = (m.get(i)).get(i2);
    
        if (i2 == null || i2 < 1 || i2 > 6) {
      if (i >= 0 && i <= 4) { workDays = 1; } 
    else  { workDays = 0; }
    }
    
        workDays = workDays + 5 * (Math.floor( ((Decimal) startDate.daysBetween(endDate)).divide(7,4))).intValue(); 
    
        if (tempdate != null) workDays *= -1; // negative number of days
    
        return workDays;
      
    }
    

}
