<apex:page standardController="sprinter__Sprint__c" extensions="SprintCapacityPlanningControllerExt,SprintCapacityDashboardControllerExt" standardStylesheets="False" docType="html-5.0">

<apex:stylesheet value="{!URLFOR($Resource.SLDS092, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />

<head>
<!-- Page Functions -->

<meta charset="UTF-8"/>
    <title></title>
    <script src="https://d3js.org/d3.v3.min.js" language="JavaScript"></script>
    <script src="liquidFillGauge.js" language="JavaScript"></script>
    <style>
        .liquidFillGaugeText { font-family: Helvetica; font-weight: bold; }
    </style>
   
</head>

<body>

<script language="JavaScript">
                    
                    function liquidFillGaugeSprintCapacityPercentageSettings(){
                    
                        if({!sprintCapacityPercentage}>=90) { //'Red' Settings
                            return {
                                minValue: 0, // The gauge minimum value.
                                maxValue: 100, // The gauge maximum value.
                                circleThickness: 0.05, // The outer circle thickness as a percentage of it's radius.
                                circleFillGap: 0.05, // The size of the gap between the outer circle and wave circle as a percentage of the outer circles radius.
                                circleColor: "#FF7777", // The color of the outer circle.
                                waveHeight: 0.1, // The wave height as a percentage of the radius of the wave circle.
                                waveCount: 1.2, // The number of full waves per width of the wave circle.
                                waveRiseTime: 50, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.
                                waveAnimateTime: 1000, // The amount of time in milliseconds for a full wave to enter the wave circle.
                                waveRise: true, // Control if the wave should rise from 0 to it's full height, or start at it's full height.
                                waveHeightScaling: true, // Controls wave size scaling at low and high fill percentages. When true, wave height reaches it's maximum at 50% fill, and minimum at 0% and 100% fill. This helps to prevent the wave from making the wave circle from appear totally full or empty when near it's minimum or maximum fill.
                                waveAnimate: true, // Controls if the wave scrolls or is static.
                                waveColor: "#FFAAAA", // The color of the fill wave. 
                                waveOffset: 0, // The amount to initially offset the wave. 0 = no offset. 1 = offset of one full wave.
                                textVertPosition: .5, // The height at which to display the percentage text withing the wave circle. 0 = bottom, 1 = top.
                                textSize: 1, // The relative height of the text to display in the wave circle. 1 = 50%
                                valueCountUp: true, // If true, the displayed value counts up from 0 to it's final value upon loading. If false, the final value is displayed.
                                displayPercent: true, // If true, a % symbol is displayed after the value.
                                textColor: "#FF4444", // The color of the value text when the wave does not overlap it.
                                waveTextColor: "#FFDDDD" // The color of the value text when the wave overlaps it.
                            };
                        } else if({!sprintCapacityPercentage}>=70 && {!sprintCapacityPercentage}<90) { //'Orange' Settings
                            return {
                                minValue: 0, // The gauge minimum value.
                                maxValue: 100, // The gauge maximum value.
                                circleThickness: 0.05, // The outer circle thickness as a percentage of it's radius.
                                circleFillGap: 0.05, // The size of the gap between the outer circle and wave circle as a percentage of the outer circles radius.
                                circleColor: "#E3681A", // The color of the outer circle.
                                waveHeight: 0.1, // The wave height as a percentage of the radius of the wave circle.
                                waveCount: 1.2, // The number of full waves per width of the wave circle.
                                waveRiseTime: 50, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.
                                waveAnimateTime: 1000, // The amount of time in milliseconds for a full wave to enter the wave circle.
                                waveRise: true, // Control if the wave should rise from 0 to it's full height, or start at it's full height.
                                waveHeightScaling: true, // Controls wave size scaling at low and high fill percentages. When true, wave height reaches it's maximum at 50% fill, and minimum at 0% and 100% fill. This helps to prevent the wave from making the wave circle from appear totally full or empty when near it's minimum or maximum fill.
                                waveAnimate: true, // Controls if the wave scrolls or is static.
                                waveColor: "#F08948", // The color of the fill wave.
                                waveOffset: 0, // The amount to initially offset the wave. 0 = no offset. 1 = offset of one full wave.
                                textVertPosition: .5, // The height at which to display the percentage text withing the wave circle. 0 = bottom, 1 = top.
                                textSize: 1, // The relative height of the text to display in the wave circle. 1 = 50%
                                valueCountUp: true, // If true, the displayed value counts up from 0 to it's final value upon loading. If false, the final value is displayed.
                                displayPercent: true, // If true, a % symbol is displayed after the value.
                                textColor: "#E2712B", // The color of the value text when the wave does not overlap it.
                                waveTextColor: "#F2D3B6" // The color of the value text when the wave overlaps it.
                            };
                        } else { //'Blue' Settings
                            return {
                                minValue: 0, // The gauge minimum value.
                                maxValue: 100, // The gauge maximum value.
                                circleThickness: 0.05, // The outer circle thickness as a percentage of it's radius.
                                circleFillGap: 0.05, // The size of the gap between the outer circle and wave circle as a percentage of the outer circles radius.
                                circleColor: "#178BCA", // The color of the outer circle.
                                waveHeight: 0.1, // The wave height as a percentage of the radius of the wave circle.
                                waveCount: 1.2, // The number of full waves per width of the wave circle.
                                waveRiseTime: 50, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.
                                waveAnimateTime: 1000, // The amount of time in milliseconds for a full wave to enter the wave circle.
                                waveRise: true, // Control if the wave should rise from 0 to it's full height, or start at it's full height.
                                waveHeightScaling: true, // Controls wave size scaling at low and high fill percentages. When true, wave height reaches it's maximum at 50% fill, and minimum at 0% and 100% fill. This helps to prevent the wave from making the wave circle from appear totally full or empty when near it's minimum or maximum fill.
                                waveAnimate: true, // Controls if the wave scrolls or is static.
                                waveColor: "#178BCA", // The color of the fill wave.
                                waveOffset: 0, // The amount to initially offset the wave. 0 = no offset. 1 = offset of one full wave.
                                textVertPosition: .5, // The height at which to display the percentage text withing the wave circle. 0 = bottom, 1 = top.
                                textSize: 1, // The relative height of the text to display in the wave circle. 1 = 50%
                                valueCountUp: true, // If true, the displayed value counts up from 0 to it's final value upon loading. If false, the final value is displayed.
                                displayPercent: true, // If true, a % symbol is displayed after the value.
                                textColor: "#045681", // The color of the value text when the wave does not overlap it.
                                waveTextColor: "#A4DBf8" // The color of the value text when the wave overlaps it.
                            };
                        }
                    }
                    
                    function liquidFillGaugeSprintCapacityHoursSettings(){
                        return {
                            minValue: 0, // The gauge minimum value.
                            maxValue: {!sprintCapacity}, // The gauge maximum value.
                            circleThickness: 0.05, // The outer circle thickness as a percentage of it's radius.
                            circleFillGap: 0.05, // The size of the gap between the outer circle and wave circle as a percentage of the outer circles radius.
                            circleColor: "#178BCA", // The color of the outer circle.
                            waveHeight: 0.1, // The wave height as a percentage of the radius of the wave circle.
                            waveCount: 1.2, // The number of full waves per width of the wave circle.
                            waveRiseTime: 50, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.
                            waveAnimateTime: 1000, // The amount of time in milliseconds for a full wave to enter the wave circle.
                            waveRise: true, // Control if the wave should rise from 0 to it's full height, or start at it's full height.
                            waveHeightScaling: true, // Controls wave size scaling at low and high fill percentages. When true, wave height reaches it's maximum at 50% fill, and minimum at 0% and 100% fill. This helps to prevent the wave from making the wave circle from appear totally full or empty when near it's minimum or maximum fill.
                            waveAnimate: true, // Controls if the wave scrolls or is static.
                            waveColor: "#178BCA", // The color of the fill wave.
                            waveOffset: 0, // The amount to initially offset the wave. 0 = no offset. 1 = offset of one full wave.
                            textVertPosition: .5, // The height at which to display the percentage text withing the wave circle. 0 = bottom, 1 = top.
                            textSize: 1, // The relative height of the text to display in the wave circle. 1 = 50%
                            valueCountUp: true, // If true, the displayed value counts up from 0 to it's final value upon loading. If false, the final value is displayed.
                            displayPercent: false, // If true, a % symbol is displayed after the value.
                            textColor: "#045681", // The color of the value text when the wave does not overlap it.
                            waveTextColor: "#A4DBf8" // The color of the value text when the wave overlaps it.
                        };
                    }
                    
                    function liquidFillGaugeSprintEsimatedHoursSettings(){
                        return {
                            minValue: 0, // The gauge minimum value.
                            maxValue: {!sprintEstimatedEffort}, // The gauge maximum value.
                            circleThickness: 0.05, // The outer circle thickness as a percentage of it's radius.
                            circleFillGap: 0.05, // The size of the gap between the outer circle and wave circle as a percentage of the outer circles radius.
                            circleColor: "#178BCA", // The color of the outer circle.
                            waveHeight: 0.1, // The wave height as a percentage of the radius of the wave circle.
                            waveCount: 1.2, // The number of full waves per width of the wave circle.
                            waveRiseTime: 50, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.
                            waveAnimateTime: 1000, // The amount of time in milliseconds for a full wave to enter the wave circle.
                            waveRise: true, // Control if the wave should rise from 0 to it's full height, or start at it's full height.
                            waveHeightScaling: true, // Controls wave size scaling at low and high fill percentages. When true, wave height reaches it's maximum at 50% fill, and minimum at 0% and 100% fill. This helps to prevent the wave from making the wave circle from appear totally full or empty when near it's minimum or maximum fill.
                            waveAnimate: true, // Controls if the wave scrolls or is static.
                            waveColor: "#178BCA", // The color of the fill wave.
                            waveOffset: 0, // The amount to initially offset the wave. 0 = no offset. 1 = offset of one full wave.
                            textVertPosition: .5, // The height at which to display the percentage text withing the wave circle. 0 = bottom, 1 = top.
                            textSize: 1, // The relative height of the text to display in the wave circle. 1 = 50%
                            valueCountUp: true, // If true, the displayed value counts up from 0 to it's final value upon loading. If false, the final value is displayed.
                            displayPercent: false, // If true, a % symbol is displayed after the value.
                            textColor: "#045681", // The color of the value text when the wave does not overlap it.
                            waveTextColor: "#A4DBf8" // The color of the value text when the wave overlaps it.
                        }
                    }
                    
                    function liquidFillGaugeSprintRemainingHoursSettings(){
                        return {
                            minValue: 0, // The gauge minimum value.
                            maxValue: {!sprintEstimatedEffort}, // The gauge maximum value.
                            circleThickness: 0.05, // The outer circle thickness as a percentage of it's radius.
                            circleFillGap: 0.05, // The size of the gap between the outer circle and wave circle as a percentage of the outer circles radius.
                            circleColor: "#178BCA", // The color of the outer circle.
                            waveHeight: 0.1, // The wave height as a percentage of the radius of the wave circle.
                            waveCount: 1.2, // The number of full waves per width of the wave circle.
                            waveRiseTime: 50, // The amount of time in milliseconds for the wave to rise from 0 to it's final height.
                            waveAnimateTime: 1000, // The amount of time in milliseconds for a full wave to enter the wave circle.
                            waveRise: true, // Control if the wave should rise from 0 to it's full height, or start at it's full height.
                            waveHeightScaling: true, // Controls wave size scaling at low and high fill percentages. When true, wave height reaches it's maximum at 50% fill, and minimum at 0% and 100% fill. This helps to prevent the wave from making the wave circle from appear totally full or empty when near it's minimum or maximum fill.
                            waveAnimate: true, // Controls if the wave scrolls or is static.
                            waveColor: "#178BCA", // The color of the fill wave.
                            waveOffset: 0, // The amount to initially offset the wave. 0 = no offset. 1 = offset of one full wave.
                            textVertPosition: .5, // The height at which to display the percentage text withing the wave circle. 0 = bottom, 1 = top.
                            textSize: 1, // The relative height of the text to display in the wave circle. 1 = 50%
                            valueCountUp: true, // If true, the displayed value counts up from 0 to it's final value upon loading. If false, the final value is displayed.
                            displayPercent: false, // If true, a % symbol is displayed after the value.
                            textColor: "#045681", // The color of the value text when the wave does not overlap it.
                            waveTextColor: "#A4DBf8" // The color of the value text when the wave overlaps it.
                        }
                    }
                    
                
                    function loadLiquidFillGauge(elementId, value, config) {
                        if(config == null) config = liquidFillGaugeDefaultSettings();
                    
                        var gauge = d3.select("#" + elementId);
                        var radius = Math.min(parseInt(gauge.style("width")), parseInt(gauge.style("height")))/2;
                        var locationX = parseInt(gauge.style("width"))/2 - radius;
                        var locationY = parseInt(gauge.style("height"))/2 - radius;
                        var fillPercent = Math.max(config.minValue, Math.min(config.maxValue, value))/config.maxValue;
                    
                        var waveHeightScale;
                        if(config.waveHeightScaling){
                            waveHeightScale = d3.scale.linear()
                                .range([0,config.waveHeight,0])
                                .domain([0,50,100]);
                        } else {
                            waveHeightScale = d3.scale.linear()
                                .range([config.waveHeight,config.waveHeight])
                                .domain([0,100]);
                        }
                    
                        var textPixels = (config.textSize*radius/2);
                        var textFinalValue = parseFloat(value).toFixed(2);
                        var textStartValue = config.valueCountUp?config.minValue:textFinalValue;
                        var percentText = config.displayPercent?"%":"";
                        var circleThickness = config.circleThickness * radius;
                        var circleFillGap = config.circleFillGap * radius;
                        var fillCircleMargin = circleThickness + circleFillGap;
                        var fillCircleRadius = radius - fillCircleMargin;
                        var waveHeight = fillCircleRadius*waveHeightScale(fillPercent*100);
                    
                        var waveLength = fillCircleRadius*2/config.waveCount;
                        var waveClipCount = 1+config.waveCount;
                        var waveClipWidth = waveLength*waveClipCount;
                    
                        // Rounding functions so that the correct number of decimal places is always displayed as the value counts up.
                        var textRounder = function(value){ return Math.round(value); };
                        if(parseFloat(textFinalValue) != parseFloat(textRounder(textFinalValue))){
                            textRounder = function(value){ return parseFloat(value).toFixed(1); };
                        }
                        if(parseFloat(textFinalValue) != parseFloat(textRounder(textFinalValue))){
                            textRounder = function(value){ return parseFloat(value).toFixed(2); };
                        }
                    
                        // Data for building the clip wave area.
                        var data = [];
                        for(var i = 0; i <= 40*waveClipCount; i++){
                            data.push({x: i/(40*waveClipCount), y: (i/(40))});
                        }
                    
                        // Scales for drawing the outer circle.
                        var gaugeCircleX = d3.scale.linear().range([0,2*Math.PI]).domain([0,1]);
                        var gaugeCircleY = d3.scale.linear().range([0,radius]).domain([0,radius]);
                    
                        // Scales for controlling the size of the clipping path.
                        var waveScaleX = d3.scale.linear().range([0,waveClipWidth]).domain([0,1]);
                        var waveScaleY = d3.scale.linear().range([0,waveHeight]).domain([0,1]);
                    
                        // Scales for controlling the position of the clipping path.
                        var waveRiseScale = d3.scale.linear()
                            // The clipping area size is the height of the fill circle + the wave height, so we position the clip wave
                            // such that the it will overlap the fill circle at all when at 0%, and will totally cover the fill
                            // circle at 100%.
                            .range([(fillCircleMargin+fillCircleRadius*2+waveHeight),(fillCircleMargin-waveHeight)])
                            .domain([0,1]);
                        var waveAnimateScale = d3.scale.linear()
                            .range([0, waveClipWidth-fillCircleRadius*2]) // Push the clip area one full wave then snap back.
                            .domain([0,1]);
                    
                        // Scale for controlling the position of the text within the gauge.
                        var textRiseScaleY = d3.scale.linear()
                            .range([fillCircleMargin+fillCircleRadius*2,(fillCircleMargin+textPixels*0.7)])
                            .domain([0,1]);
                    
                        // Center the gauge within the parent SVG.
                        var gaugeGroup = gauge.append("g")
                            .attr('transform','translate('+locationX+','+locationY+')');
                    
                        // Draw the outer circle.
                        var gaugeCircleArc = d3.svg.arc()
                            .startAngle(gaugeCircleX(0))
                            .endAngle(gaugeCircleX(1))
                            .outerRadius(gaugeCircleY(radius))
                            .innerRadius(gaugeCircleY(radius-circleThickness));
                        gaugeGroup.append("path")
                            .attr("d", gaugeCircleArc)
                            .style("fill", config.circleColor)
                            .attr('transform','translate('+radius+','+radius+')');
                    
                        // Text where the wave does not overlap.
                        var text1 = gaugeGroup.append("text")
                            .text(textRounder(textStartValue) + percentText)
                            .attr("class", "liquidFillGaugeText")
                            .attr("text-anchor", "middle")
                            .attr("font-size", textPixels + "px")
                            .style("fill", config.textColor)
                            .attr('transform','translate('+radius+','+textRiseScaleY(config.textVertPosition)+')');
                    
                        // The clipping wave area.
                        var clipArea = d3.svg.area()
                            .x(function(d) { return waveScaleX(d.x); } )
                            .y0(function(d) { return waveScaleY(Math.sin(Math.PI*2*config.waveOffset*-1 + Math.PI*2*(1-config.waveCount) + d.y*2*Math.PI));} )
                            .y1(function(d) { return (fillCircleRadius*2 + waveHeight); } );
                        var waveGroup = gaugeGroup.append("defs")
                            .append("clipPath")
                            .attr("id", "clipWave" + elementId);
                        var wave = waveGroup.append("path")
                            .datum(data)
                            .attr("d", clipArea)
                            .attr("T", 0);
                    
                        // The inner circle with the clipping wave attached.
                        var fillCircleGroup = gaugeGroup.append("g")
                            .attr("clip-path", "url(#clipWave" + elementId + ")");
                        fillCircleGroup.append("circle")
                            .attr("cx", radius)
                            .attr("cy", radius)
                            .attr("r", fillCircleRadius)
                            .style("fill", config.waveColor);
                    
                        // Text where the wave does overlap.
                        var text2 = fillCircleGroup.append("text")
                            .text(textRounder(textStartValue) + percentText)
                            .attr("class", "liquidFillGaugeText")
                            .attr("text-anchor", "middle")
                            .attr("font-size", textPixels + "px")
                            .style("fill", config.waveTextColor)
                            .attr('transform','translate('+radius+','+textRiseScaleY(config.textVertPosition)+')');
                    
                        // Make the value count up.
                        if(config.valueCountUp){
                            var textTween = function(){
                                var i = d3.interpolate(this.textContent, textFinalValue);
                                return function(t) { this.textContent = textRounder(i(t)) + percentText; }
                            };
                            text1.transition()
                                .duration(config.waveRiseTime)
                                .tween("text", textTween);
                            text2.transition()
                                .duration(config.waveRiseTime)
                                .tween("text", textTween);
                        }
                    
                        // Make the wave rise. wave and waveGroup are separate so that horizontal and vertical movement can be controlled independently.
                        var waveGroupXPosition = fillCircleMargin+fillCircleRadius*2-waveClipWidth;
                        if(config.waveRise){
                            waveGroup.attr('transform','translate('+waveGroupXPosition+','+waveRiseScale(0)+')')
                                .transition()
                                .duration(config.waveRiseTime)
                                .attr('transform','translate('+waveGroupXPosition+','+waveRiseScale(fillPercent)+')')
                                .each("start", function(){ wave.attr('transform','translate(1,0)'); }); // This transform is necessary to get the clip wave positioned correctly when waveRise=true and waveAnimate=false. The wave will not position correctly without this, but it's not clear why this is actually necessary.
                        } else {
                            waveGroup.attr('transform','translate('+waveGroupXPosition+','+waveRiseScale(fillPercent)+')');
                        }
                    
                        if(config.waveAnimate) animateWave();
                    
                        function animateWave() {
                            wave.attr('transform','translate('+waveAnimateScale(wave.attr('T'))+',0)');
                            wave.transition()
                                .duration(config.waveAnimateTime * (1-wave.attr('T')))
                                .ease('linear')
                                .attr('transform','translate('+waveAnimateScale(1)+',0)')
                                .attr('T', 1)
                                .each('end', function(){
                                    wave.attr('T', 0);
                                    animateWave(config.waveAnimateTime);
                                });
                        }
                    }
                    
                </script>


<!-- REQUIRED SLDS WRAPPER -->
<div class="slds">  
    
    <div class="slds-grid slds-wrap slds-grid--align-center">
    
    <apex:outputpanel rendered="{!SprintCapacityZero != True}">
    
        <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-4">
            <div align="center" class="slds-tile">
                <svg id="fillgauge1"></svg>
                <script language="JavaScript">
                    var config1 = liquidFillGaugeSprintCapacityPercentageSettings();
                    var gauge1 = loadLiquidFillGauge("fillgauge1", {!sprintCapacityPercentage}, config1);
                </script>
                <div class="slds-text-heading--label slds-p-top--medium slds-p-bottom--small">% Capacity Planned</div>
            </div>
        </div>
    
    </apex:outputpanel>
        
    <apex:outputpanel rendered="{!SprintCapacityZero != True}">
        
        <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-4">
            <div class="slds-tile slds-text-align--center">
                <svg id="fillgauge2"></svg>
                <script language="JavaScript">
                    var config1 = liquidFillGaugeSprintCapacityHoursSettings();
                    var gauge1 = loadLiquidFillGauge("fillgauge2", {!sprintCapacity}, config1);
                </script>
                <div class="slds-text-heading--label slds-text-align--center slds-p-top--medium slds-p-bottom--small">Sprint Capacity (hrs)</div>
            </div>
        </div>
        
    </apex:outputpanel>
      
    <apex:outputpanel rendered="{!SprintCapacityZero != True}">  
        
        <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-4">
            <div class="slds-tile slds-text-align--center">
                <svg id="fillgauge3"></svg>
                <script language="JavaScript">
                    var config1 = liquidFillGaugeSprintEsimatedHoursSettings();
                    var gauge1 = loadLiquidFillGauge("fillgauge3", {!sprintEstimatedEffort}, config1);
                </script>
                <div class="slds-text-heading--label slds-text-align--center slds-p-top--medium slds-p-bottom--small">Effort in Sprint (hrs)</div>
            </div>
        </div>
        
    </apex:outputPanel>
    
    <apex:outputpanel rendered="{!SprintCapacityZero != True}">
       
        <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-4">
            <div class="slds-tile slds-text-align--center">
                <svg id="fillgauge4"></svg>
                <script language="JavaScript">
                    var config1 = liquidFillGaugeSprintRemainingHoursSettings();
                    var gauge1 = loadLiquidFillGauge("fillgauge4", {!sprintEffortRemaining}, config1);
                </script>
                <div class="slds-text-heading--label slds-text-align--center slds-p-top--medium slds-p-bottom--small">Effort Remaining (hrs)</div>
            </div>
        </div>
    
    </apex:outputpanel>
    
        <apex:outputPanel rendered="{!NoAssociatedScrumTeam}">
            <div class="slds-box slds-box slds-theme--shade slds-theme--alert-texture">
                <p>
                    <strong>There is no Scrum Team associated to this Sprint, please add one</strong>
                </p>
            </div>
        </apex:outputPanel>
        
        <apex:outputPanel rendered="{!SprintCapacityZero}">
            <div class="slds-box slds-box slds-theme--shade slds-theme--alert-texture">
                <p>
                    <strong>No capacity currently in sprint, add Scrum Team Member capacity</strong>
                </p>
            </div>
        </apex:outputPanel>
    
        <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-1 slds-p-top--large">
            
            <apex:form >
                
                <div class="slds-card">
                    <div class="slds-card__header slds-grid">
                        <div class="slds-media slds-media--center slds-has-flexi-truncate">
                            <div class="slds-media__body">
                                <h2 class="slds-text-heading--small slds-truncate">Sprint Team Capacity</h2>
                            </div>
                        </div>
                        <div class="slds-no-flex">
                            <div class="slds-button-group">
                                <apex:commandButton id="updateSprintCapacity" value="Update Sprint Capacity" styleclass="slds-button slds-button--neutral slds-button--small">
                                    <apex:actionSupport event="onclick" action="{!updateSprintCapacity}" rerender="Dashboard" oncomplete="window.top.location='/{!Sprint.id}'; return false"/>
                                </apex:commandButton>
                            </div>
                        </div>
                    </div>
                    <div class="slds-card__body">
                        <!-- Table to display the displayScrumTeamMembers -->  
                        <table class="slds-table slds-max-medium-table--stacked slds-table--bordered slds-no-row-hover">
                            <thead>
                                <tr>
                                    <th class="slds-text-heading--label slds-size--1-of-5" scope="col">
                                        <span class="slds-truncate">Profile</span>    
                                    </th>
                                    <th class="slds-text-heading--label slds-size--1-of-5" scope="col">
                                        <span class="slds-truncate">Name</span>
                                    </th>
                                    <th class="slds-text-heading--label slds-size--1-of-5 slds-is-sortable" scope="col">
                                        <span class="slds-truncate">Tasks (hrs)</span>
                                    </th>
                                    <th class="slds-text-heading--label slds-size--1-of-5 slds-is-sortable" scope="col">
                                        <span class="slds-truncate">Capacity (hrs)</span>
                                    </th>
                                    <th class="slds-text-heading--label slds-size--1-of-5" scope="col">
                                        <span class="slds-truncate">Updated Capacity (hrs)</span>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <apex:repeat value="{!displayScrumTeamMembers}" var="scrumTeamMember">
                                    <tr>
                                        <td data-label="Mug shot"> 
                                            <span class="slds-avatar slds-avatar--circle slds-avatar--medium">
                                                <img src="{!scrumTeamMember.scrumTeamMemberPhoto}" />
                                            </span>
                                        </td>
                                        <th data-label="Name" role="row"><a href="#" class="slds-truncate" styleClass="{!IF(scrumTeamMember.scrumTeamMemberCapacity < scrumTeamMember.scrumTeamMemberAssignedEffort,'bg-warning','bg-success')}">{!scrumTeamMember.scrumTeamMemberName}</a></th>
                                        <td data-label="Tasks (hrs)" styleClass="{!IF(scrumTeamMember.scrumTeamMemberCapacity < scrumTeamMember.scrumTeamMemberAssignedEffort,'bg-warning','bg-success')}">{!scrumTeamMember.scrumTeamMemberAssignedEffort}</td>
                                        <td data-label="Capacity (hrs)" styleClass="{!IF(scrumTeamMember.scrumTeamMemberCapacity < scrumTeamMember.scrumTeamMemberAssignedEffort,'bg-warning','bg-success')}">{!scrumTeamMember.scrumTeamMemberCapacity}</td>
                                        <td data-label="Updated Capacity (hrs)" styleClass="{!IF(scrumTeamMember.scrumTeamMemberCapacity < scrumTeamMember.scrumTeamMemberAssignedEffort,'bg-warning','bg-success')}">
                                            <apex:inputText value="{!scrumTeamMember.scrumTeamMemberUpdatedCapacity}"/>
                                        </td>
                                   </tr>
                                </apex:repeat>
                            </tbody>                
                        </table>
                        
                        
                    </div>
                    
                    <div class="slds-card__footer">
                    
                        <div class="slds-button-group">
                            <apex:commandButton id="updateSprintCapacity1" value="Update Sprint Capacity" styleclass="slds-button slds-button--neutral slds-button--small">
                                <apex:actionSupport event="onclick" action="{!updateSprintCapacity}" rerender="Dashboard" oncomplete="window.top.location='/{!Sprint.id}'; return false"/>
                            </apex:commandButton>
                        </div>
                        
                    </div>
                
                </div>
                
            </apex:form>
        
        </div>
    
    </div>
</div>

<!-- REQUIRED SLDS WRAPPER -->
</body>

<!-- Styles-->

</apex:page>
